package com.cg.dao;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.omg.CORBA.UserException;

import com.cg.dbutil.DBUtil;
import com.cg.entities.BookingDetails;
import com.cg.entities.Hotel;
import com.cg.entities.RoomDetails;
import com.cg.entities.Users;
import com.cg.exception.BookingsNotFoundException;
import com.cg.exception.HotelNotFoundException;
import com.cg.exception.RoomsNotFoundException;
import com.cg.exception.UserCreationException;
import com.cg.exception.UserNotFoundException;

public class UserDaoImpl implements UserDao{
	
	
	public static final int BOOKED=0;
	public static final int AVAILABLE=1;
	Connection con=null;
	Statement st= null;
	PreparedStatement pst = null;
	ResultSet rs=null;
	
	Logger userDaoLogger=null;
	public UserDaoImpl() 
	{
		userDaoLogger=Logger.getLogger(UserDaoImpl.class);
		PropertyConfigurator.configure("log4j.properties");
		userDaoLogger.debug("This is a debug message.");
		userDaoLogger.warn("This is a warn message.");
		userDaoLogger.fatal("This is a fatal message.");
	}

	@Override
	public int registerUser(Users user) throws UserCreationException{
		int rowsAffected = 0;
		try
		{
			con = DBUtil.getConn();
			String query="INSERT INTO Users VALUES(user_sequence.nextval,?,?,?,?,?,?,?)";
			pst=con.prepareStatement(query);
			pst.setString(1, user.getPassword());
			pst.setString(2, user.getRole());
			pst.setString(3, user.getUser_name());
			pst.setString(4, user.getMobile_no());
			pst.setString(5, user.getPhone());
			pst.setString(6, user.getAddress());
			pst.setString(7, user.getEmail());
			rowsAffected =  pst.executeUpdate();
			if(rowsAffected == 0){
				throw new UserCreationException("Id Cannot be created! Please try again.");
			}
			return rowsAffected;
		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		}
		return 0;
	}

	@Override
	public Users LoginUser(String user_name, String password) 
			throws UserNotFoundException{
		
		Users user = null;
		try 
		{
			con=DBUtil.getConn();
			String query="SELECT * FROM Users where user_name='"+user_name+"' AND password='"+password+"'";
			st=con.createStatement();
			rs=st.executeQuery(query);		
			
			while(rs.next())
			{
				user = new Users(rs.getString("user_id"),
						rs.getString("password"),
						rs.getString("role"),
						rs.getString("user_name"),
						rs.getString("mobile_no"),
						rs.getString("phone"),
						rs.getString("address"),
						rs.getString("email"));
			}
			if(user == null){
				throw new UserNotFoundException("Invalid username and password");
			}
		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		} finally {
			try
			{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
		}
		return user;
	}

	@Override
	public List<RoomDetails> fetchAvailableRooms(String hotel_id) 
			throws RoomsNotFoundException{
		
		List<RoomDetails> roomsList = new ArrayList<RoomDetails>();
		try {
			con = DBUtil.getConn();
			String query="SELECT * FROM roomdetails WHERE hotel_id='"+hotel_id+"' AND availability="+UserDaoImpl.AVAILABLE;
			st=con.createStatement();
			rs=st.executeQuery(query);	
			
			while(rs.next()){
				RoomDetails room = new RoomDetails(
				rs.getString("hotel_id"),
				rs.getString("room_id"),
				rs.getString("room_no"),
				rs.getString("room_type"),
				rs.getFloat("per_night_rate"),
				rs.getInt("availability"),
				rs.getBlob("photo"));
				roomsList.add(room);
			}
			if(roomsList.size() == 0){
				throw new RoomsNotFoundException("There are no rooms available with the given hotel id.");
			}

		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		} finally{
			try
			{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e)
			{
				e.printStackTrace();
			}
		}
		return roomsList;
	}

	@Override
	public BookingDetails bookRoom(String room_id, BookingDetails bookDet) 
			throws BookingsNotFoundException, RoomsNotFoundException{
		int rowsAffected = 0;
		try {
			con = DBUtil.getConn();
			String query = "UPDATE roomdetails SET availability="+UserDaoImpl.BOOKED+" WHERE room_id='"+room_id+"'";
			pst = con.prepareStatement(query);
			rowsAffected = pst.executeUpdate();
			if(rowsAffected == 0){
				throw new RoomsNotFoundException("Availability of room could not be changed.");
			}
			
			query="SELECT booking_id_generator.nextval FROM dual";
			st=con.createStatement();
			rs = st.executeQuery(query);
			rs.next();
			String booking_id = rs.getString("nextval");
			System.out.println(booking_id);
			
			rowsAffected = 0;
			query = "INSERT INTO bookingdetails VALUES(?,?,?,?,?,?,?,?)";
			pst = con.prepareStatement(query);
			pst.setString(1, booking_id);
			pst.setString(2, room_id);
			pst.setString(3, bookDet.getUser_id());
			pst.setDate(4, bookDet.getBooked_from());
			pst.setDate(5, bookDet.getBooked_to());
			pst.setInt(6, bookDet.getNo_of_adults());
			pst.setInt(7, bookDet.getNo_of_children());
			pst.setFloat(8, bookDet.getAmount());
			rowsAffected = pst.executeUpdate();
			if(rowsAffected == 0){
				throw new BookingsNotFoundException("Booking could not be processed. Please try again.");
			}
			query = "SELECT * FROM bookingdetails WHERE booking_id='"+booking_id+"'";
			st = con.createStatement();
			rs =st.executeQuery(query);
			if(rs == null){
				throw new BookingsNotFoundException("Could not fetch booking details");
			}
			while(rs.next()){
				bookDet = new BookingDetails(
						rs.getString("booking_id"),
						rs.getString("room_id"),
						rs.getString("user_id"),
						rs.getDate("booked_from"),
						rs.getDate("booked_to"),
						rs.getInt("no_of_adults"),
						rs.getInt("no_of_children"),
						rs.getFloat("amount"));
			}

		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		} finally{
			try{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e){
//				throw  new HotelException(e.getMessage());
				e.printStackTrace();
			}
		}
		return bookDet;
	}

	@Override
	public BookingDetails viewBookingStatus(String booking_id) 
			throws BookingsNotFoundException{
		
		BookingDetails bookdetail= null;
		try {
			con = DBUtil.getConn();
			String query="SELECT * FROM bookingdetails WHERE booking_id ='"+booking_id+"'";
			st=con.createStatement();
			rs=st.executeQuery(query);	
			while(rs.next()){
				bookdetail = new BookingDetails(
						rs.getString("booking_id"),
						rs.getString("room_id"),
						rs.getString("user_id"),
						rs.getDate("booked_from"),
						rs.getDate("booked_to"),
						rs.getInt("no_of_adults"),
						rs.getInt("no_of_children"),
						rs.getFloat("amount"));
			}
			if(bookdetail == null){
				throw new BookingsNotFoundException("There is no booking detail available for"
						+ "\nthe following Id");
			}
		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		} finally{
				try
				{
					st.close();
					rs.close();
					con.close();
				}
				catch(SQLException e)
				{
//					throw  new HotelException(e.getMessage());
					e.printStackTrace();
				}
			}
		return bookdetail;
	}

	@Override
	public List<Hotel> searchHotelByCity(String city) 
			throws HotelNotFoundException{
		List<Hotel> hotels =  new ArrayList<>();
		try {
			con = DBUtil.getConn();
			String Query = "SELECT * FROM hotel WHERE city='"+city+"'";
			st=con.createStatement();
			rs=st.executeQuery(Query);
			while(rs.next()) {
				Hotel hotel = new Hotel();
				hotel = new Hotel();
				hotel.setHotel_id(rs.getString("hotel_id"));
				hotel.setCity(rs.getString("city"));
				hotel.setHotel_name(rs.getString("hotel_name"));
				hotel.setAddress(rs.getString("address"));
				hotel.setDescription(rs.getString("description"));
				hotel.setAvg_rate_per_night(rs.getFloat("avg_rate_per_night"));
				hotel.setPhone_no(rs.getString("phone_no1"));
				hotel.setPhone_no2(rs.getString("phone_no2"));
				hotel.setRating(rs.getString("rating"));
				hotel.setEmail(rs.getString("email"));
				hotel.setFax(rs.getString("fax"));
				hotels.add(hotel);
			}
			if(hotels.size() == 0){
				throw new HotelNotFoundException("\nThere are no hotels in the following city.");
				
			}
		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		}finally {
			try {
				rs.close();
				con.close();
				st.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		
		return hotels;
	}

	@Override
	public Float fetchPerNightRate(String room_id) 
			throws RoomsNotFoundException{
		Float perNightRate = null;
		try 
		{
			con=DBUtil.getConn();
			String query="SELECT per_night_rate FROM roomdetails where room_id='"+room_id+"'";
			st=con.createStatement();
			rs=st.executeQuery(query);	
			while(rs.next())
			{
				perNightRate = rs.getFloat("per_night_rate");
			}
			if(perNightRate == null){
				throw new RoomsNotFoundException("\nThere is no room with perticular Id.");
			}
		} catch (SQLException e) {
			System.out.println("App Error: There is problem in syntax.");
		} catch(IOException e){
			System.out.println("App Error: Could not establish proper connection.");
		} finally 
		{
			try
			{
				st.close();
				rs.close();
				con.close();
			}
			catch(SQLException e)
			{
//				throw  new HotelException(e.getMessage());
				e.printStackTrace();
			}
		}

		return perNightRate;
	}

}
