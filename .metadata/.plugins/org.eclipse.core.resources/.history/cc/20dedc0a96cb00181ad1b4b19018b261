package com.cg.service;

import java.sql.Date;
import java.util.regex.Pattern;

import com.cg.entities.BookingDetails;
import com.cg.entities.Hotel;
import com.cg.entities.RoomDetails;
import com.cg.entities.Users;
import com.cg.exception.ValidationException;

public class ValidationServiceImpl implements ValidationService
{
	static final String VALIDATED = "Correct Input!";
	AdminServiceImpl admSer = null;
	
	

	public ValidationServiceImpl() {
		admSer = new AdminServiceImpl();
	}

	@Override
	public String userValidation(Users user) 
			throws ValidationException{
		if(userNameValidation(user.getUser_name())){
			if(passwordValidation(user.getPassword())){
				if(phoneValidation(user.getPhone())){
					if(phoneValidation(user.getMobile_no())){
						if(emailValidation(user.getEmail())) return VALIDATED;
						else throw new ValidationException("Enter a valid Email Address");
					}else throw new ValidationException("Enter a valid Mobile Number");
				}else throw new ValidationException("Enter a valid Phone Number");
			}else throw new ValidationException("Enter a valid Password which contains:\n"
				+ "A digit must occur at least once\n"
				+ "An upper case letter must occur at least once\n"
				+ "A lower case letter must occur at least once\n"
				+ "A special character must occur at least once\n"
				+ "No whitespace allowed in the entire string\n"
				+ "At least 8 characters");
		}else throw new ValidationException("Enter a Valid Username:"
				+ "Starting with Caps\n"
				+ "with minimum 1 and maximum 20 characters");
	}
	
	@Override
	public String hotelValidation(Hotel hotel) 
			throws ValidationException{
	if(emailValidation(hotel.getEmail())){
		if(phoneValidation(hotel.getPhone_no())){
			if(phoneValidation(hotel.getPhone_no())) return VALIDATED;
				else throw new ValidationException("Enter a valid Phone Number");
			}else throw new ValidationException("Enter a valid Phone Number");
		}else throw new ValidationException("Enter a valid Email Address");
	}

	@Override
	public String bookingDetailsValidation(BookingDetails bookD)
			throws ValidationException{
	if(datesValidation(bookD.getBooked_from(),bookD.getBooked_to())){
		if(dateValidation(bookD.getBooked_from())){
			if(personsValidation(bookD.getNo_of_adults(), bookD.getNo_of_children())) return VALIDATED;
			else throw new ValidationException("Number of persons limit exceeded");
			}else throw new ValidationException("The date is older than current day");
		}else throw new ValidationException("The checkout date is older than booked checkin date");
	}


	
	//these are generic functions for validation....

	public boolean passwordValidation(String str)
	{
		String pswdPattern = "^.*(?=.{8,})(?=..*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=]).*$";
		/*(?=.*[0-9])= a digit must occur at least once
			(?=.*[a-z])= a lower case letter must occur at least once
			(?=.*[A-Z])= an upper case letter must occur at least once
			(?=.*[@#$%^&+=])= a special character must occur at least once
			(?=\\S+$) =no whitespace allowed in the entire string
			.{8,}= at least 8 characters*/
		if(Pattern.matches(pswdPattern,str))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	@Override
	public String RoomDetailsValidation(RoomDetails roomDetails)
			throws ValidationException {
		if(priceValidation(roomDetails.getPer_night_rate()))return VALIDATED;
		else throw new ValidationException("Input Price cannot be negative"
				+ "\nPlease try again.");
	}

	public boolean userNameValidation(String str)
	{
		String namePattern = "[A-Z][a-z]{1,20}";
		if(Pattern.matches(namePattern,str)){
			if(admSer.searchUser(str)) return false;
			else return true;
		}else return false;
	}

	public boolean phoneValidation(String str)
	{
		String PhonePattern = "[0-9]{10}";
		if(Pattern.matches(PhonePattern,str))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public boolean emailValidation(String str)
	{
		String EmailPattern = "[a-zA-Z0-9._%+-]+@[A-Za-z]+[.][A-Za-z]{1,3}";
		if(Pattern.matches(EmailPattern,str))
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public boolean dateValidation(Date date)
	{
		Date user_date = date;
		long Day = System.currentTimeMillis();
		Date c_date = new Date(Day);
		if(user_date.before(c_date))
		{
			return false;
		} 
		else 
		{
			return true;
		}

	}

	public boolean datesValidation(Date from_date,Date to_date)
	{
		if(to_date.before(from_date))
		{
			return false;
		} 
		else 
		{
			return true;
		}

	}
	
	public boolean personsValidation(int adult,int children)
	{
		int sum=adult+children;
		if(sum>=0 && sum <=3)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	public boolean priceValidation(Float price)
	{
		if(price<0)
		{
			return false;
		}
		else
		{
			return true;
		}
	}

	
}

